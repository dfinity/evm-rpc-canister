#!/usr/bin/env bash

set -euo pipefail
set -x

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

#########
# USAGE #
#########

function title() {
    echo "Builds ic_eth Canister"
}

function usage() {
    cat << EOF

Usage:
  $0 [--only-dependencies] [--ic_eth]

Options:
  --only-dependencies          only build rust dependencies (no js build, no wasm optimization)
  --ic_eth                      build the icenthl canister
EOF
}

function help() {
    cat << EOF

Builds the ic_eth canister.

NOTE: This requires a working rust toolchain as well as ic-wasm.
EOF

}

ONLY_DEPS=
CANISTERS=()

while [[ $# -gt 0  ]]
do
    case "$1" in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --only-dependencies)
            ONLY_DEPS=1
            shift
            ;;
        --ic_eth)
            CANISTERS+=("ic_eth")
            shift
            ;;
        *)
            echo "ERROR: unknown argument $1"
            usage
            echo
            echo "Use 'build --help' for more information"
            exit 1
            ;;
    esac
done

if [ ${#CANISTERS[@]} -eq 0 ]; then
    CANISTERS=("ic_eth")
fi

# Checking for dependencies
if [[ ! "$(command -v ic-wasm)" || "$(ic-wasm --version)" != "ic-wasm 0.3.5" ]]
then
    echo "could not find ic-wasm 0.3.5"
    echo "ic-wasm version 0.3.5 is needed, please run the following command:"
    echo "  cargo install ic-wasm --version 0.3.5"
    exit 1
fi

# Builds a single canister
# build_canister CANISTER EXTRA_BUILD_ARGS...
# CANISTER: possible values: [internet_identity, archive]
# EXTRA_BUILD_ARGS: extra arguments supplied to cargo when building the canister
function build_canister() {
    local canister=$1
    shift
    local extra_build_args=("$@")

    echo "Building $canister"
    echo

    SRC_DIR="/src/$canister"
    TARGET="wasm32-unknown-unknown"
    # standardize source references
    CARGO_HOME="${CARGO_HOME:-"$HOME/.cargo"}"
    RUSTFLAGS="--remap-path-prefix $CARGO_HOME=/cargo"

    cargo_build_args=(
        --target "$TARGET"
        --release
        -j1
        )
    # XXX: for bash > 4.4, empty arrays are considered unset, so do some substitution
    cargo_build_args+=(${extra_build_args[@]+"${extra_build_args[@]}"})

    echo Running cargo build "${cargo_build_args[@]}"
    echo RUSTFLAGS: "$RUSTFLAGS"

    RUSTFLAGS="$RUSTFLAGS" cargo build "${cargo_build_args[@]}"

    if [ "$ONLY_DEPS" != "1" ]
    then
        ic-wasm \
            "/cargo_target/$TARGET/release/$canister.wasm" \
            -o "./$canister.wasm" \
            shrink
        ic-wasm "$canister.wasm" -o "$canister.wasm" metadata candid:service -f "$canister.did" -v public
        gzip --no-name --force "$canister.wasm"
    fi
}

for canister in "${CANISTERS[@]}"
do
  build_canister "$canister"
done
