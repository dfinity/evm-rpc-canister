type Auth = variant { Rpc; RegisterProvider; FreeRpc; ManageService };
type Block = record {
  miner : text;
  totalDifficulty : nat;
  receiptsRoot : text;
  stateRoot : text;
  hash : text;
  difficulty : nat;
  size : nat;
  uncles : vec text;
  baseFeePerGas : nat;
  extraData : text;
  transactionsRoot : opt text;
  sha3Uncles : text;
  nonce : nat;
  number : nat;
  timestamp : nat;
  transactions : vec text;
  gasLimit : nat;
  logsBloom : text;
  parentHash : text;
  gasUsed : nat;
  mixHash : text;
};
type BlockTag = variant {
  Earliest;
  Safe;
  Finalized;
  Latest;
  Number : nat;
  Pending;
};
type CandidRpcSource = variant {
  EthSepolia : opt EthSepoliaService;
  EthMainnet : opt EthMainnetService;
};
type EthMainnetService = variant { BlockPi; Cloudflare; PublicNode; Ankr };
type EthSepoliaService = variant { BlockPi; PublicNode; Ankr };
type FeeHistory = record {
  reward : vec vec nat;
  gasUsedRatio : vec float64;
  oldestBlock : nat;
  baseFeePerGas : vec nat;
};
type FeeHistoryArgs = record {
  blockCount : nat;
  newestBlock : BlockTag;
  rewardPercentiles : opt vec nat8;
};
type GetLogsArgs = record {
  fromBlock : opt BlockTag;
  toBlock : opt BlockTag;
  addresses : vec text;
  topics : opt vec text;
};
type GetTransactionCountArgs = record { address : text; block : BlockTag };
type HttpHeader = record { value : text; name : text };
type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsingError : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type LogEntry = record {
  transactionHash : opt text;
  blockNumber : opt nat;
  data : text;
  blockHash : opt text;
  transactionIndex : opt nat;
  topics : vec text;
  address : text;
  logIndex : opt nat;
  removed : bool;
};
type Message = variant { Data : vec nat8; Hash : vec nat8 };
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  ProviderNotFound;
  NoPermission;
};
type ProviderView = record {
  cyclesPerCall : nat64;
  owner : principal;
  hostname : text;
  primary : bool;
  chainId : nat64;
  cyclesPerMessageByte : nat64;
  providerId : nat64;
};
type RegisterProviderArgs = record {
  cyclesPerCall : nat64;
  credentialPath : text;
  hostname : text;
  credentialHeaders : opt vec HttpHeader;
  chainId : nat64;
  cyclesPerMessageByte : nat64;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : opt FeeHistory; Err : RpcError };
type Result_1 = variant { Ok : Block; Err : RpcError };
type Result_2 = variant { Ok : vec LogEntry; Err : RpcError };
type Result_3 = variant { Ok : nat; Err : RpcError };
type Result_4 = variant { Ok : opt TransactionReceipt; Err : RpcError };
type Result_5 = variant { Ok : SendRawTransactionResult; Err : RpcError };
type Result_6 = variant { Ok : text; Err : RpcError };
type Result_7 = variant { Ok : nat; Err : RpcError };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type SendRawTransactionResult = variant {
  Ok;
  NonceTooLow;
  NonceTooHigh;
  InsufficientFunds;
};
type SignedMessage = record {
  signature : text;
  message : Message;
  address : text;
};
type Source = variant {
  Custom : record { url : text; headers : opt vec HttpHeader };
  Service : record { hostname : text; chainId : opt nat64 };
  Chain : nat64;
  Provider : nat64;
};
type TransactionReceipt = record {
  to : text;
  status : nat;
  transactionHash : text;
  blockNumber : nat;
  from : text;
  logs : vec LogEntry;
  blockHash : text;
  "type" : text;
  transactionIndex : nat;
  effectiveGasPrice : nat;
  logsBloom : text;
  contractAddress : opt text;
  gasUsed : nat;
};
type UpdateProviderArgs = record {
  cyclesPerCall : opt nat64;
  credentialPath : opt text;
  hostname : opt text;
  credentialHeaders : opt vec HttpHeader;
  primary : opt bool;
  cyclesPerMessageByte : opt nat64;
  providerId : nat64;
};
type ValidationError = variant {
  CredentialPathNotAllowed : text;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed : text;
  UrlParseError : text;
  InvalidHex : text;
};
service : {
  authorize : (principal, Auth) -> ();
  deauthorize : (principal, Auth) -> ();
  eth_feeHistory : (CandidRpcSource, FeeHistoryArgs) -> (Result);
  eth_getBlockByNumber : (CandidRpcSource, BlockTag) -> (Result_1);
  eth_getLogs : (CandidRpcSource, GetLogsArgs) -> (Result_2);
  eth_getTransactionCount : (CandidRpcSource, GetTransactionCountArgs) -> (
      Result_3,
    );
  eth_getTransactionReceipt : (CandidRpcSource, text) -> (Result_4);
  eth_sendRawTransaction : (CandidRpcSource, text) -> (Result_5);
  getAccumulatedCycleCount : (nat64) -> (nat) query;
  getAuthorized : (Auth) -> (vec text) query;
  getNodesInSubnet : () -> (nat32) query;
  getOpenRpcAccess : () -> (bool) query;
  getProviders : () -> (vec ProviderView) query;
  registerProvider : (RegisterProviderArgs) -> (nat64);
  request : (Source, text, nat64) -> (Result_6);
  requestCost : (Source, text, nat64) -> (Result_7) query;
  setNodesInSubnet : (nat32) -> ();
  setOpenRpcAccess : (bool) -> ();
  unregisterProvider : (nat64) -> (bool);
  updateProvider : (UpdateProviderArgs) -> ();
  verifyMessageSignature : (SignedMessage) -> (bool) query;
  withdrawAccumulatedCycles : (nat64, principal) -> ();
}