type Auth = variant { Rpc; RegisterProvider; FreeRpc; ManageService };
type Block = record { base_fee_per_gas : nat; number : nat };
type BlockSpec = variant { Tag : BlockTag; Number : nat };
type BlockTag = variant {
  Earliest;
  Safe;
  Finalized;
  Latest;
  Number : nat64;
  Pending;
};
type CandidRpcSource = variant {
  EthSepolia : opt EthSepoliaService;
  EthMainnet : opt EthMainnetService;
};
type EthMainnetService = variant { BlockPi; Cloudflare; PublicNode; Ankr };
type EthSepoliaService = variant { BlockPi; PublicNode; Ankr };
type FeeHistory = record {
  reward : vec vec nat;
  base_fee_per_gas : vec nat;
  oldest_block : nat;
};
type FeeHistoryArgs = record {
  block_count : nat;
  newest_block : BlockSpec;
  reward_percentiles : opt vec nat8;
};
type GetLogsArgs = record {
  addresses : vec text;
  topics : opt vec text;
  to_block : opt BlockSpec;
  from_block : opt BlockSpec;
};
type GetTransactionCountArgs = record { address : text; block : BlockSpec };
type HttpHeader = record { value : text; name : text };
type HttpOutcallError = variant {
  IcError : record { code : RejectionCode; message : text };
  InvalidHttpJsonRpcResponse : record {
    status : nat16;
    body : text;
    parsing_error : opt text;
  };
};
type JsonRpcError = record { code : int64; message : text };
type LogEntry = record {
  transaction_hash : opt vec nat8;
  block_hash : opt vec nat8;
  log_index : opt nat;
  data : vec nat8;
  transaction_index : opt nat;
  block_number : opt nat;
  topics : vec vec nat8;
  address : vec nat8;
  removed : bool;
};
type Message = variant { Data : vec nat8; Hash : vec nat8 };
type ProviderError = variant {
  TooFewCycles : record { expected : nat; received : nat };
  ProviderNotFound;
  NoPermission;
};
type ProviderView = record {
  owner : principal;
  hostname : text;
  provider_id : nat64;
  cycles_per_message_byte : nat64;
  primary : bool;
  chain_id : nat64;
  cycles_per_call : nat64;
};
type RegisterProviderArgs = record {
  credential_headers : opt vec HttpHeader;
  hostname : text;
  cycles_per_message_byte : nat64;
  chain_id : nat64;
  cycles_per_call : nat64;
  credential_path : text;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant { Ok : opt FeeHistory; Err : RpcError };
type Result_1 = variant { Ok : Block; Err : RpcError };
type Result_2 = variant { Ok : vec LogEntry; Err : RpcError };
type Result_3 = variant { Ok : nat; Err : RpcError };
type Result_4 = variant { Ok : opt TransactionReceipt; Err : RpcError };
type Result_5 = variant { Ok : SendRawTransactionResult; Err : RpcError };
type Result_6 = variant { Ok : text; Err : RpcError };
type Result_7 = variant { Ok : nat; Err : RpcError };
type RpcError = variant {
  JsonRpcError : JsonRpcError;
  ProviderError : ProviderError;
  ValidationError : ValidationError;
  HttpOutcallError : HttpOutcallError;
};
type SendRawTransactionResult = variant {
  Ok;
  NonceTooLow;
  NonceTooHigh;
  InsufficientFunds;
};
type SignedMessage = record {
  signature : text;
  message : Message;
  address : text;
};
type Source = variant {
  Custom : record { url : text; headers : opt vec HttpHeader };
  Service : record { hostname : text; chain_id : opt nat64 };
  Chain : nat64;
  Provider : nat64;
};
type TransactionReceipt = record {
  effective_gas_price : nat;
  status : TransactionStatus;
  transaction_hash : vec nat8;
  block_hash : vec nat8;
  block_number : nat;
  gas_used : nat;
};
type TransactionStatus = variant { Success; Failure };
type UpdateProviderArgs = record {
  credential_headers : opt vec HttpHeader;
  hostname : opt text;
  provider_id : nat64;
  cycles_per_message_byte : opt nat64;
  primary : opt bool;
  cycles_per_call : opt nat64;
  credential_path : opt text;
};
type ValidationError = variant {
  CredentialPathNotAllowed : text;
  HostNotAllowed : text;
  CredentialHeaderNotAllowed : text;
  UrlParseError : text;
  InvalidHex : text;
};
service : {
  authorize : (principal, Auth) -> ();
  deauthorize : (principal, Auth) -> ();
  eth_fee_history : (CandidRpcSource, FeeHistoryArgs) -> (Result);
  eth_get_block_by_number : (CandidRpcSource, BlockSpec) -> (Result_1);
  eth_get_logs : (CandidRpcSource, GetLogsArgs) -> (Result_2);
  eth_get_transaction_count : (CandidRpcSource, GetTransactionCountArgs) -> (
      Result_3,
    );
  eth_get_transaction_receipt : (CandidRpcSource, text) -> (Result_4);
  eth_send_raw_transaction : (CandidRpcSource, text) -> (Result_5);
  get_accumulated_cycle_count : (nat64) -> (nat) query;
  get_authorized : (Auth) -> (vec text) query;
  get_nodes_in_subnet : () -> (nat32) query;
  get_open_rpc_access : () -> (bool) query;
  get_providers : () -> (vec ProviderView) query;
  register_provider : (RegisterProviderArgs) -> (nat64);
  request : (Source, text, nat64) -> (Result_6);
  request_cost : (Source, text, nat64) -> (Result_7) query;
  set_nodes_in_subnet : (nat32) -> ();
  set_open_rpc_access : (bool) -> ();
  unregister_provider : (nat64) -> (bool);
  update_provider : (UpdateProviderArgs) -> ();
  verify_message_signature : (SignedMessage) -> (bool) query;
  withdraw_accumulated_cycles : (nat64, principal) -> ();
}