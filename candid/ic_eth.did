type Auth = variant { Rpc; RegisterProvider; FreeRpc; Admin };
type EthRpcError = variant {
  ServiceUrlHostNotAllowed;
  HttpRequestError : record { code : nat32; message : text };
  TooFewCycles : text;
  ServiceUrlParseError;
  ServiceUrlHostMissing;
  ProviderNotFound;
  NoPermission;
};
type RegisterProvider = record {
  base_url : text;
  cycles_per_message_byte : nat64;
  chain_id : nat64;
  cycles_per_call : nat64;
  credential_path : text;
};
type RegisteredProvider = record {
  base_url : text;
  owner : principal;
  provider_id : nat64;
  cycles_per_message_byte : nat64;
  chain_id : nat64;
  cycles_per_call : nat64;
};
type Result = variant { Ok : vec nat8; Err : EthRpcError };
service : {
  authorize : (principal, Auth) -> ();
  deauthorize : (principal, Auth) -> ();
  get_authorized : (Auth) -> (vec text) query;
  get_nodes_in_subnet : () -> (nat32) query;
  get_open_rpc_access : () -> (bool) query;
  get_owed_cycles : (nat64) -> (nat) query;
  get_providers : () -> (vec RegisteredProvider) query;
  provider_request : (nat64, text, nat64) -> (Result);
  provider_request_cost : (nat64, text, nat64) -> (opt nat) query;
  register_provider : (RegisterProvider) -> (nat64);
  request : (text, text, nat64) -> (Result);
  request_cost : (text, text, nat64) -> (nat) query;
  set_nodes_in_subnet : (nat32) -> ();
  set_open_rpc_access : (bool) -> ();
  unregister_provider : (nat64) -> ();
  update_provider_credential : (nat64, text) -> ();
  withdraw_owed_cycles : (nat64, principal) -> ();
}