type Auth = variant { Rpc; RegisterProvider; FreeRpc; Admin };
type EthRpcError = variant {
  ServiceUrlHostNotAllowed;
  HttpRequestError : record { code : nat32; message : text };
  TooFewCycles : text;
  ServiceUrlParseError;
  SerializeError;
  ServiceUrlHostMissing;
  ProviderNotFound;
  NoPermission;
  ProviderNotActive;
};
type ProviderView = record {
  base_url : text;
  active : bool;
  owner : principal;
  provider_id : nat64;
  cycles_per_message_byte : nat64;
  chain_id : nat64;
  cycles_per_call : nat64;
};
type RegisterProvider = record {
  base_url : text;
  cycles_per_message_byte : nat64;
  chain_id : nat64;
  cycles_per_call : nat64;
  credential_path : text;
};
type Result = variant { Ok : nat; Err : EthRpcError };
type Result_1 = variant { Ok : vec nat8; Err : EthRpcError };
type Source = variant { Url : text; Chain : nat64; Provider : nat64 };
type UpdateProvider = record {
  base_url : opt text;
  active : opt bool;
  provider_id : nat64;
  cycles_per_message_byte : opt nat64;
  cycles_per_call : opt nat64;
  credential_path : opt text;
};
service : {
  authorize : (principal, Auth) -> ();
  deauthorize : (principal, Auth) -> ();
  eth_gas_price : (Source) -> (Result);
  get_authorized : (Auth) -> (vec text) query;
  get_nodes_in_subnet : () -> (nat32) query;
  get_open_rpc_access : () -> (bool) query;
  get_owed_cycles : (nat64) -> (nat) query;
  get_providers : () -> (vec ProviderView) query;
  register_provider : (RegisterProvider) -> (nat64);
  request : (Source, text, nat64) -> (Result_1);
  request_cost : (Source, text, nat64) -> (Result) query;
  set_nodes_in_subnet : (nat32) -> ();
  set_open_rpc_access : (bool) -> ();
  unregister_provider : (nat64) -> ();
  update_provider : (UpdateProvider) -> ();
  verify_signature : (vec nat8, vec nat8, vec nat8) -> (bool) query;
  withdraw_owed_cycles : (nat64, principal) -> ();
}