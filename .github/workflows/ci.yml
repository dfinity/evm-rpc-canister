name: CI

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
    paths-ignore:
      - "README.md"
jobs:
  cargo-clippy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - run: rustup component add clippy

      - name: Cargo clippy
        # We run clippy twice (once without tests), so that it accurately reports dead code in the non-test configuration.
        # `manual_range_contains` is disabled because a >= x && a < y reads more clearly than (x..y).contains(a) and
        # there are additional caveats for floating point numbers (https://github.com/rust-lang/rust-clippy/issues/6455)
        run: |
          cargo clippy -- -D clippy::all -D warnings -A clippy::manual_range_contains
          cargo clippy --tests --benches -- -D clippy::all -D warnings -A clippy::manual_range_contains

  cargo-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install PocketIC server
        uses: dfinity/pocketic@main
        with:
          pocket-ic-server-version: "6.0.0"

      - uses: Swatinem/rust-cache@v2

      - name: Install Protoc
        uses: arduino/setup-protoc@v3

      - name: Cargo test
        run: unset CI && cargo test

  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Docker build
        run: |
          ./scripts/docker-build

      - name: Archive Artifact
        uses: actions/upload-artifact@v4
        with:
          name: evm_rpc.wasm.gz
          path: evm_rpc.wasm.gz

      - name: Add summary
        run: |
          hash=`sha256sum evm_rpc.wasm.gz`
          echo "SHA-256 :hash: ${hash}" >> $GITHUB_STEP_SUMMARY

  e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - uses: Swatinem/rust-cache@v2

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Start dfx
        run: dfx start --background

      - name: Install npm packages
        run: npm ci

      - name: Run E2E tests
        run: scripts/e2e

      - name: Run examples
        run: scripts/examples
      
      - name: Check formatting
        run: cargo fmt --all -- --check
